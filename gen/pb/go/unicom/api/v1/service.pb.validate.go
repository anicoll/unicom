// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: unicom/api/v1/service.proto

package apiv1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on Attachment with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Attachment) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Attachment with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in AttachmentMultiError, or
// nil if none found.
func (m *Attachment) ValidateAll() error {
	return m.validate(true)
}

func (m *Attachment) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for Data

	if m.Url != nil {
		// no validation rules for Url
	}

	if len(errors) > 0 {
		return AttachmentMultiError(errors)
	}

	return nil
}

// AttachmentMultiError is an error wrapping multiple validation errors
// returned by Attachment.ValidateAll() if the designated constraints aren't met.
type AttachmentMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AttachmentMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AttachmentMultiError) AllErrors() []error { return m }

// AttachmentValidationError is the validation error returned by
// Attachment.Validate if the designated constraints aren't met.
type AttachmentValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AttachmentValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AttachmentValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AttachmentValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AttachmentValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AttachmentValidationError) ErrorName() string { return "AttachmentValidationError" }

// Error satisfies the builtin error interface
func (e AttachmentValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAttachment.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AttachmentValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AttachmentValidationError{}

// Validate checks the field values on ResponseChannel with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ResponseChannel) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ResponseChannel with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ResponseChannelMultiError, or nil if none found.
func (m *ResponseChannel) ValidateAll() error {
	return m.validate(true)
}

func (m *ResponseChannel) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Schema

	// no validation rules for Url

	if len(errors) > 0 {
		return ResponseChannelMultiError(errors)
	}

	return nil
}

// ResponseChannelMultiError is an error wrapping multiple validation errors
// returned by ResponseChannel.ValidateAll() if the designated constraints
// aren't met.
type ResponseChannelMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ResponseChannelMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ResponseChannelMultiError) AllErrors() []error { return m }

// ResponseChannelValidationError is the validation error returned by
// ResponseChannel.Validate if the designated constraints aren't met.
type ResponseChannelValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ResponseChannelValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ResponseChannelValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ResponseChannelValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ResponseChannelValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ResponseChannelValidationError) ErrorName() string { return "ResponseChannelValidationError" }

// Error satisfies the builtin error interface
func (e ResponseChannelValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sResponseChannel.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ResponseChannelValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ResponseChannelValidationError{}

// Validate checks the field values on ResponseEvent with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ResponseEvent) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ResponseEvent with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ResponseEventMultiError, or
// nil if none found.
func (m *ResponseEvent) ValidateAll() error {
	return m.validate(true)
}

func (m *ResponseEvent) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for WorkflowId

	// no validation rules for Status

	if m.ErrorMessage != nil {
		// no validation rules for ErrorMessage
	}

	if len(errors) > 0 {
		return ResponseEventMultiError(errors)
	}

	return nil
}

// ResponseEventMultiError is an error wrapping multiple validation errors
// returned by ResponseEvent.ValidateAll() if the designated constraints
// aren't met.
type ResponseEventMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ResponseEventMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ResponseEventMultiError) AllErrors() []error { return m }

// ResponseEventValidationError is the validation error returned by
// ResponseEvent.Validate if the designated constraints aren't met.
type ResponseEventValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ResponseEventValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ResponseEventValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ResponseEventValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ResponseEventValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ResponseEventValidationError) ErrorName() string { return "ResponseEventValidationError" }

// Error satisfies the builtin error interface
func (e ResponseEventValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sResponseEvent.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ResponseEventValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ResponseEventValidationError{}

// Validate checks the field values on EmailRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *EmailRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on EmailRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in EmailRequestMultiError, or
// nil if none found.
func (m *EmailRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *EmailRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ToAddress

	// no validation rules for FromAddress

	// no validation rules for Html

	// no validation rules for Subject

	for idx, item := range m.GetAttachments() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, EmailRequestValidationError{
						field:  fmt.Sprintf("Attachments[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, EmailRequestValidationError{
						field:  fmt.Sprintf("Attachments[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return EmailRequestValidationError{
					field:  fmt.Sprintf("Attachments[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return EmailRequestMultiError(errors)
	}

	return nil
}

// EmailRequestMultiError is an error wrapping multiple validation errors
// returned by EmailRequest.ValidateAll() if the designated constraints aren't met.
type EmailRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EmailRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EmailRequestMultiError) AllErrors() []error { return m }

// EmailRequestValidationError is the validation error returned by
// EmailRequest.Validate if the designated constraints aren't met.
type EmailRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EmailRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EmailRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EmailRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EmailRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EmailRequestValidationError) ErrorName() string { return "EmailRequestValidationError" }

// Error satisfies the builtin error interface
func (e EmailRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEmailRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EmailRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EmailRequestValidationError{}

// Validate checks the field values on LanguageContent with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *LanguageContent) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LanguageContent with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// LanguageContentMultiError, or nil if none found.
func (m *LanguageContent) ValidateAll() error {
	return m.validate(true)
}

func (m *LanguageContent) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Arabic

	// no validation rules for English

	if len(errors) > 0 {
		return LanguageContentMultiError(errors)
	}

	return nil
}

// LanguageContentMultiError is an error wrapping multiple validation errors
// returned by LanguageContent.ValidateAll() if the designated constraints
// aren't met.
type LanguageContentMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LanguageContentMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LanguageContentMultiError) AllErrors() []error { return m }

// LanguageContentValidationError is the validation error returned by
// LanguageContent.Validate if the designated constraints aren't met.
type LanguageContentValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LanguageContentValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LanguageContentValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LanguageContentValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LanguageContentValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LanguageContentValidationError) ErrorName() string { return "LanguageContentValidationError" }

// Error satisfies the builtin error interface
func (e LanguageContentValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLanguageContent.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LanguageContentValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LanguageContentValidationError{}

// Validate checks the field values on PushRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *PushRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PushRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in PushRequestMultiError, or
// nil if none found.
func (m *PushRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *PushRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for IdempotencyKey

	// no validation rules for ExternalCustomerId

	if all {
		switch v := interface{}(m.GetContent()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PushRequestValidationError{
					field:  "Content",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PushRequestValidationError{
					field:  "Content",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetContent()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PushRequestValidationError{
				field:  "Content",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetHeading()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PushRequestValidationError{
					field:  "Heading",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PushRequestValidationError{
					field:  "Heading",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetHeading()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PushRequestValidationError{
				field:  "Heading",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetSubTitle()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PushRequestValidationError{
					field:  "SubTitle",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PushRequestValidationError{
					field:  "SubTitle",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSubTitle()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PushRequestValidationError{
				field:  "SubTitle",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return PushRequestMultiError(errors)
	}

	return nil
}

// PushRequestMultiError is an error wrapping multiple validation errors
// returned by PushRequest.ValidateAll() if the designated constraints aren't met.
type PushRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PushRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PushRequestMultiError) AllErrors() []error { return m }

// PushRequestValidationError is the validation error returned by
// PushRequest.Validate if the designated constraints aren't met.
type PushRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PushRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PushRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PushRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PushRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PushRequestValidationError) ErrorName() string { return "PushRequestValidationError" }

// Error satisfies the builtin error interface
func (e PushRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPushRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PushRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PushRequestValidationError{}

// Validate checks the field values on SendCommunicationRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SendCommunicationRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SendCommunicationRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SendCommunicationRequestMultiError, or nil if none found.
func (m *SendCommunicationRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SendCommunicationRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for IsAsync

	if all {
		switch v := interface{}(m.GetSendAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SendCommunicationRequestValidationError{
					field:  "SendAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SendCommunicationRequestValidationError{
					field:  "SendAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSendAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SendCommunicationRequestValidationError{
				field:  "SendAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Domain

	for idx, item := range m.GetResponseChannels() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SendCommunicationRequestValidationError{
						field:  fmt.Sprintf("ResponseChannels[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SendCommunicationRequestValidationError{
						field:  fmt.Sprintf("ResponseChannels[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SendCommunicationRequestValidationError{
					field:  fmt.Sprintf("ResponseChannels[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if all {
		switch v := interface{}(m.GetEmail()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SendCommunicationRequestValidationError{
					field:  "Email",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SendCommunicationRequestValidationError{
					field:  "Email",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetEmail()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SendCommunicationRequestValidationError{
				field:  "Email",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetPush()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SendCommunicationRequestValidationError{
					field:  "Push",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SendCommunicationRequestValidationError{
					field:  "Push",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPush()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SendCommunicationRequestValidationError{
				field:  "Push",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return SendCommunicationRequestMultiError(errors)
	}

	return nil
}

// SendCommunicationRequestMultiError is an error wrapping multiple validation
// errors returned by SendCommunicationRequest.ValidateAll() if the designated
// constraints aren't met.
type SendCommunicationRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SendCommunicationRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SendCommunicationRequestMultiError) AllErrors() []error { return m }

// SendCommunicationRequestValidationError is the validation error returned by
// SendCommunicationRequest.Validate if the designated constraints aren't met.
type SendCommunicationRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SendCommunicationRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SendCommunicationRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SendCommunicationRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SendCommunicationRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SendCommunicationRequestValidationError) ErrorName() string {
	return "SendCommunicationRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SendCommunicationRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSendCommunicationRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SendCommunicationRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SendCommunicationRequestValidationError{}

// Validate checks the field values on StreamCommunicationRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *StreamCommunicationRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StreamCommunicationRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// StreamCommunicationRequestMultiError, or nil if none found.
func (m *StreamCommunicationRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *StreamCommunicationRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Domain

	if all {
		switch v := interface{}(m.GetEmail()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, StreamCommunicationRequestValidationError{
					field:  "Email",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, StreamCommunicationRequestValidationError{
					field:  "Email",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetEmail()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return StreamCommunicationRequestValidationError{
				field:  "Email",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetPush()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, StreamCommunicationRequestValidationError{
					field:  "Push",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, StreamCommunicationRequestValidationError{
					field:  "Push",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPush()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return StreamCommunicationRequestValidationError{
				field:  "Push",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return StreamCommunicationRequestMultiError(errors)
	}

	return nil
}

// StreamCommunicationRequestMultiError is an error wrapping multiple
// validation errors returned by StreamCommunicationRequest.ValidateAll() if
// the designated constraints aren't met.
type StreamCommunicationRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StreamCommunicationRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StreamCommunicationRequestMultiError) AllErrors() []error { return m }

// StreamCommunicationRequestValidationError is the validation error returned
// by StreamCommunicationRequest.Validate if the designated constraints aren't met.
type StreamCommunicationRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StreamCommunicationRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StreamCommunicationRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StreamCommunicationRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StreamCommunicationRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StreamCommunicationRequestValidationError) ErrorName() string {
	return "StreamCommunicationRequestValidationError"
}

// Error satisfies the builtin error interface
func (e StreamCommunicationRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStreamCommunicationRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StreamCommunicationRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StreamCommunicationRequestValidationError{}

// Validate checks the field values on SendCommunicationResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SendCommunicationResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SendCommunicationResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SendCommunicationResponseMultiError, or nil if none found.
func (m *SendCommunicationResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *SendCommunicationResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return SendCommunicationResponseMultiError(errors)
	}

	return nil
}

// SendCommunicationResponseMultiError is an error wrapping multiple validation
// errors returned by SendCommunicationResponse.ValidateAll() if the
// designated constraints aren't met.
type SendCommunicationResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SendCommunicationResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SendCommunicationResponseMultiError) AllErrors() []error { return m }

// SendCommunicationResponseValidationError is the validation error returned by
// SendCommunicationResponse.Validate if the designated constraints aren't met.
type SendCommunicationResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SendCommunicationResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SendCommunicationResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SendCommunicationResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SendCommunicationResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SendCommunicationResponseValidationError) ErrorName() string {
	return "SendCommunicationResponseValidationError"
}

// Error satisfies the builtin error interface
func (e SendCommunicationResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSendCommunicationResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SendCommunicationResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SendCommunicationResponseValidationError{}

// Validate checks the field values on StreamCommunicationResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *StreamCommunicationResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StreamCommunicationResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// StreamCommunicationResponseMultiError, or nil if none found.
func (m *StreamCommunicationResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *StreamCommunicationResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return StreamCommunicationResponseMultiError(errors)
	}

	return nil
}

// StreamCommunicationResponseMultiError is an error wrapping multiple
// validation errors returned by StreamCommunicationResponse.ValidateAll() if
// the designated constraints aren't met.
type StreamCommunicationResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StreamCommunicationResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StreamCommunicationResponseMultiError) AllErrors() []error { return m }

// StreamCommunicationResponseValidationError is the validation error returned
// by StreamCommunicationResponse.Validate if the designated constraints
// aren't met.
type StreamCommunicationResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StreamCommunicationResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StreamCommunicationResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StreamCommunicationResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StreamCommunicationResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StreamCommunicationResponseValidationError) ErrorName() string {
	return "StreamCommunicationResponseValidationError"
}

// Error satisfies the builtin error interface
func (e StreamCommunicationResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStreamCommunicationResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StreamCommunicationResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StreamCommunicationResponseValidationError{}

// Validate checks the field values on GetStatusRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetStatusRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetStatusRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetStatusRequestMultiError, or nil if none found.
func (m *GetStatusRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetStatusRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return GetStatusRequestMultiError(errors)
	}

	return nil
}

// GetStatusRequestMultiError is an error wrapping multiple validation errors
// returned by GetStatusRequest.ValidateAll() if the designated constraints
// aren't met.
type GetStatusRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetStatusRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetStatusRequestMultiError) AllErrors() []error { return m }

// GetStatusRequestValidationError is the validation error returned by
// GetStatusRequest.Validate if the designated constraints aren't met.
type GetStatusRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetStatusRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetStatusRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetStatusRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetStatusRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetStatusRequestValidationError) ErrorName() string { return "GetStatusRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetStatusRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetStatusRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetStatusRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetStatusRequestValidationError{}

// Validate checks the field values on GetStatusResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetStatusResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetStatusResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetStatusResponseMultiError, or nil if none found.
func (m *GetStatusResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetStatusResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Status

	if len(errors) > 0 {
		return GetStatusResponseMultiError(errors)
	}

	return nil
}

// GetStatusResponseMultiError is an error wrapping multiple validation errors
// returned by GetStatusResponse.ValidateAll() if the designated constraints
// aren't met.
type GetStatusResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetStatusResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetStatusResponseMultiError) AllErrors() []error { return m }

// GetStatusResponseValidationError is the validation error returned by
// GetStatusResponse.Validate if the designated constraints aren't met.
type GetStatusResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetStatusResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetStatusResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetStatusResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetStatusResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetStatusResponseValidationError) ErrorName() string {
	return "GetStatusResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetStatusResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetStatusResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetStatusResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetStatusResponseValidationError{}
