// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: unicom/api/v1/service.proto

package apiv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	UnicomService_SendCommunication_FullMethodName   = "/unicom.api.v1.UnicomService/SendCommunication"
	UnicomService_StreamCommunication_FullMethodName = "/unicom.api.v1.UnicomService/StreamCommunication"
	UnicomService_GetStatus_FullMethodName           = "/unicom.api.v1.UnicomService/GetStatus"
)

// UnicomServiceClient is the client API for UnicomService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UnicomServiceClient interface {
	SendCommunication(ctx context.Context, in *SendCommunicationRequest, opts ...grpc.CallOption) (*SendResponse, error)
	StreamCommunication(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[StreamCommunicationRequest, SendResponse], error)
	GetStatus(ctx context.Context, in *GetStatusRequest, opts ...grpc.CallOption) (*GetStatusResponse, error)
}

type unicomServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUnicomServiceClient(cc grpc.ClientConnInterface) UnicomServiceClient {
	return &unicomServiceClient{cc}
}

func (c *unicomServiceClient) SendCommunication(ctx context.Context, in *SendCommunicationRequest, opts ...grpc.CallOption) (*SendResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SendResponse)
	err := c.cc.Invoke(ctx, UnicomService_SendCommunication_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *unicomServiceClient) StreamCommunication(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[StreamCommunicationRequest, SendResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &UnicomService_ServiceDesc.Streams[0], UnicomService_StreamCommunication_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[StreamCommunicationRequest, SendResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type UnicomService_StreamCommunicationClient = grpc.BidiStreamingClient[StreamCommunicationRequest, SendResponse]

func (c *unicomServiceClient) GetStatus(ctx context.Context, in *GetStatusRequest, opts ...grpc.CallOption) (*GetStatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetStatusResponse)
	err := c.cc.Invoke(ctx, UnicomService_GetStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UnicomServiceServer is the server API for UnicomService service.
// All implementations should embed UnimplementedUnicomServiceServer
// for forward compatibility.
type UnicomServiceServer interface {
	SendCommunication(context.Context, *SendCommunicationRequest) (*SendResponse, error)
	StreamCommunication(grpc.BidiStreamingServer[StreamCommunicationRequest, SendResponse]) error
	GetStatus(context.Context, *GetStatusRequest) (*GetStatusResponse, error)
}

// UnimplementedUnicomServiceServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedUnicomServiceServer struct{}

func (UnimplementedUnicomServiceServer) SendCommunication(context.Context, *SendCommunicationRequest) (*SendResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendCommunication not implemented")
}
func (UnimplementedUnicomServiceServer) StreamCommunication(grpc.BidiStreamingServer[StreamCommunicationRequest, SendResponse]) error {
	return status.Errorf(codes.Unimplemented, "method StreamCommunication not implemented")
}
func (UnimplementedUnicomServiceServer) GetStatus(context.Context, *GetStatusRequest) (*GetStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStatus not implemented")
}
func (UnimplementedUnicomServiceServer) testEmbeddedByValue() {}

// UnsafeUnicomServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UnicomServiceServer will
// result in compilation errors.
type UnsafeUnicomServiceServer interface {
	mustEmbedUnimplementedUnicomServiceServer()
}

func RegisterUnicomServiceServer(s grpc.ServiceRegistrar, srv UnicomServiceServer) {
	// If the following call pancis, it indicates UnimplementedUnicomServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&UnicomService_ServiceDesc, srv)
}

func _UnicomService_SendCommunication_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendCommunicationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UnicomServiceServer).SendCommunication(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UnicomService_SendCommunication_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UnicomServiceServer).SendCommunication(ctx, req.(*SendCommunicationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UnicomService_StreamCommunication_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(UnicomServiceServer).StreamCommunication(&grpc.GenericServerStream[StreamCommunicationRequest, SendResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type UnicomService_StreamCommunicationServer = grpc.BidiStreamingServer[StreamCommunicationRequest, SendResponse]

func _UnicomService_GetStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UnicomServiceServer).GetStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UnicomService_GetStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UnicomServiceServer).GetStatus(ctx, req.(*GetStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// UnicomService_ServiceDesc is the grpc.ServiceDesc for UnicomService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UnicomService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "unicom.api.v1.UnicomService",
	HandlerType: (*UnicomServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendCommunication",
			Handler:    _UnicomService_SendCommunication_Handler,
		},
		{
			MethodName: "GetStatus",
			Handler:    _UnicomService_GetStatus_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamCommunication",
			Handler:       _UnicomService_StreamCommunication_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "unicom/api/v1/service.proto",
}
