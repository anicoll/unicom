// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: unicom/api/v1/service.proto

package apiv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Unicom_SendCommunication_FullMethodName   = "/unicom.api.v1.Unicom/SendCommunication"
	Unicom_StreamCommunication_FullMethodName = "/unicom.api.v1.Unicom/StreamCommunication"
	Unicom_GetStatus_FullMethodName           = "/unicom.api.v1.Unicom/GetStatus"
)

// UnicomClient is the client API for Unicom service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UnicomClient interface {
	SendCommunication(ctx context.Context, in *SendCommunicationRequest, opts ...grpc.CallOption) (*SendResponse, error)
	StreamCommunication(ctx context.Context, opts ...grpc.CallOption) (Unicom_StreamCommunicationClient, error)
	GetStatus(ctx context.Context, in *GetStatusRequest, opts ...grpc.CallOption) (*GetStatusResponse, error)
}

type unicomClient struct {
	cc grpc.ClientConnInterface
}

func NewUnicomClient(cc grpc.ClientConnInterface) UnicomClient {
	return &unicomClient{cc}
}

func (c *unicomClient) SendCommunication(ctx context.Context, in *SendCommunicationRequest, opts ...grpc.CallOption) (*SendResponse, error) {
	out := new(SendResponse)
	err := c.cc.Invoke(ctx, Unicom_SendCommunication_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *unicomClient) StreamCommunication(ctx context.Context, opts ...grpc.CallOption) (Unicom_StreamCommunicationClient, error) {
	stream, err := c.cc.NewStream(ctx, &Unicom_ServiceDesc.Streams[0], Unicom_StreamCommunication_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &unicomStreamCommunicationClient{stream}
	return x, nil
}

type Unicom_StreamCommunicationClient interface {
	Send(*StreamCommunicationRequest) error
	Recv() (*SendResponse, error)
	grpc.ClientStream
}

type unicomStreamCommunicationClient struct {
	grpc.ClientStream
}

func (x *unicomStreamCommunicationClient) Send(m *StreamCommunicationRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *unicomStreamCommunicationClient) Recv() (*SendResponse, error) {
	m := new(SendResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *unicomClient) GetStatus(ctx context.Context, in *GetStatusRequest, opts ...grpc.CallOption) (*GetStatusResponse, error) {
	out := new(GetStatusResponse)
	err := c.cc.Invoke(ctx, Unicom_GetStatus_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UnicomServer is the server API for Unicom service.
// All implementations should embed UnimplementedUnicomServer
// for forward compatibility
type UnicomServer interface {
	SendCommunication(context.Context, *SendCommunicationRequest) (*SendResponse, error)
	StreamCommunication(Unicom_StreamCommunicationServer) error
	GetStatus(context.Context, *GetStatusRequest) (*GetStatusResponse, error)
}

// UnimplementedUnicomServer should be embedded to have forward compatible implementations.
type UnimplementedUnicomServer struct {
}

func (UnimplementedUnicomServer) SendCommunication(context.Context, *SendCommunicationRequest) (*SendResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendCommunication not implemented")
}
func (UnimplementedUnicomServer) StreamCommunication(Unicom_StreamCommunicationServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamCommunication not implemented")
}
func (UnimplementedUnicomServer) GetStatus(context.Context, *GetStatusRequest) (*GetStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStatus not implemented")
}

// UnsafeUnicomServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UnicomServer will
// result in compilation errors.
type UnsafeUnicomServer interface {
	mustEmbedUnimplementedUnicomServer()
}

func RegisterUnicomServer(s grpc.ServiceRegistrar, srv UnicomServer) {
	s.RegisterService(&Unicom_ServiceDesc, srv)
}

func _Unicom_SendCommunication_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendCommunicationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UnicomServer).SendCommunication(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Unicom_SendCommunication_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UnicomServer).SendCommunication(ctx, req.(*SendCommunicationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Unicom_StreamCommunication_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(UnicomServer).StreamCommunication(&unicomStreamCommunicationServer{stream})
}

type Unicom_StreamCommunicationServer interface {
	Send(*SendResponse) error
	Recv() (*StreamCommunicationRequest, error)
	grpc.ServerStream
}

type unicomStreamCommunicationServer struct {
	grpc.ServerStream
}

func (x *unicomStreamCommunicationServer) Send(m *SendResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *unicomStreamCommunicationServer) Recv() (*StreamCommunicationRequest, error) {
	m := new(StreamCommunicationRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Unicom_GetStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UnicomServer).GetStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Unicom_GetStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UnicomServer).GetStatus(ctx, req.(*GetStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Unicom_ServiceDesc is the grpc.ServiceDesc for Unicom service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Unicom_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "unicom.api.v1.Unicom",
	HandlerType: (*UnicomServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendCommunication",
			Handler:    _Unicom_SendCommunication_Handler,
		},
		{
			MethodName: "GetStatus",
			Handler:    _Unicom_GetStatus_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamCommunication",
			Handler:       _Unicom_StreamCommunication_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "unicom/api/v1/service.proto",
}
