// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package push_test

import (
	"context"
	"net/http"

	"github.com/OneSignal/onesignal-go-api/v2"
	mock "github.com/stretchr/testify/mock"
)

// newMocknotificationCreator creates a new instance of mocknotificationCreator. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newMocknotificationCreator(t interface {
	mock.TestingT
	Cleanup(func())
}) *mocknotificationCreator {
	mock := &mocknotificationCreator{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// mocknotificationCreator is an autogenerated mock type for the notificationCreator type
type mocknotificationCreator struct {
	mock.Mock
}

type mocknotificationCreator_Expecter struct {
	mock *mock.Mock
}

func (_m *mocknotificationCreator) EXPECT() *mocknotificationCreator_Expecter {
	return &mocknotificationCreator_Expecter{mock: &_m.Mock}
}

// CreateNotification provides a mock function for the type mocknotificationCreator
func (_mock *mocknotificationCreator) CreateNotification(ctx context.Context) onesignal.ApiCreateNotificationRequest {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for CreateNotification")
	}

	var r0 onesignal.ApiCreateNotificationRequest
	if returnFunc, ok := ret.Get(0).(func(context.Context) onesignal.ApiCreateNotificationRequest); ok {
		r0 = returnFunc(ctx)
	} else {
		r0 = ret.Get(0).(onesignal.ApiCreateNotificationRequest)
	}
	return r0
}

// mocknotificationCreator_CreateNotification_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateNotification'
type mocknotificationCreator_CreateNotification_Call struct {
	*mock.Call
}

// CreateNotification is a helper method to define mock.On call
//   - ctx
func (_e *mocknotificationCreator_Expecter) CreateNotification(ctx interface{}) *mocknotificationCreator_CreateNotification_Call {
	return &mocknotificationCreator_CreateNotification_Call{Call: _e.mock.On("CreateNotification", ctx)}
}

func (_c *mocknotificationCreator_CreateNotification_Call) Run(run func(ctx context.Context)) *mocknotificationCreator_CreateNotification_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *mocknotificationCreator_CreateNotification_Call) Return(apiCreateNotificationRequest onesignal.ApiCreateNotificationRequest) *mocknotificationCreator_CreateNotification_Call {
	_c.Call.Return(apiCreateNotificationRequest)
	return _c
}

func (_c *mocknotificationCreator_CreateNotification_Call) RunAndReturn(run func(ctx context.Context) onesignal.ApiCreateNotificationRequest) *mocknotificationCreator_CreateNotification_Call {
	_c.Call.Return(run)
	return _c
}

// newMocknotificationRequest creates a new instance of mocknotificationRequest. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newMocknotificationRequest(t interface {
	mock.TestingT
	Cleanup(func())
}) *mocknotificationRequest {
	mock := &mocknotificationRequest{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// mocknotificationRequest is an autogenerated mock type for the notificationRequest type
type mocknotificationRequest struct {
	mock.Mock
}

type mocknotificationRequest_Expecter struct {
	mock *mock.Mock
}

func (_m *mocknotificationRequest) EXPECT() *mocknotificationRequest_Expecter {
	return &mocknotificationRequest_Expecter{mock: &_m.Mock}
}

// Execute provides a mock function for the type mocknotificationRequest
func (_mock *mocknotificationRequest) Execute() (*onesignal.CreateNotificationSuccessResponse, *http.Response, error) {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Execute")
	}

	var r0 *onesignal.CreateNotificationSuccessResponse
	var r1 *http.Response
	var r2 error
	if returnFunc, ok := ret.Get(0).(func() (*onesignal.CreateNotificationSuccessResponse, *http.Response, error)); ok {
		return returnFunc()
	}
	if returnFunc, ok := ret.Get(0).(func() *onesignal.CreateNotificationSuccessResponse); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*onesignal.CreateNotificationSuccessResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func() *http.Response); ok {
		r1 = returnFunc()
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}
	if returnFunc, ok := ret.Get(2).(func() error); ok {
		r2 = returnFunc()
	} else {
		r2 = ret.Error(2)
	}
	return r0, r1, r2
}

// mocknotificationRequest_Execute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Execute'
type mocknotificationRequest_Execute_Call struct {
	*mock.Call
}

// Execute is a helper method to define mock.On call
func (_e *mocknotificationRequest_Expecter) Execute() *mocknotificationRequest_Execute_Call {
	return &mocknotificationRequest_Execute_Call{Call: _e.mock.On("Execute")}
}

func (_c *mocknotificationRequest_Execute_Call) Run(run func()) *mocknotificationRequest_Execute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *mocknotificationRequest_Execute_Call) Return(createNotificationSuccessResponse *onesignal.CreateNotificationSuccessResponse, response *http.Response, err error) *mocknotificationRequest_Execute_Call {
	_c.Call.Return(createNotificationSuccessResponse, response, err)
	return _c
}

func (_c *mocknotificationRequest_Execute_Call) RunAndReturn(run func() (*onesignal.CreateNotificationSuccessResponse, *http.Response, error)) *mocknotificationRequest_Execute_Call {
	_c.Call.Return(run)
	return _c
}

// Notification provides a mock function for the type mocknotificationRequest
func (_mock *mocknotificationRequest) Notification(notification onesignal.Notification) {
	_mock.Called(notification)
	return
}

// mocknotificationRequest_Notification_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Notification'
type mocknotificationRequest_Notification_Call struct {
	*mock.Call
}

// Notification is a helper method to define mock.On call
//   - notification
func (_e *mocknotificationRequest_Expecter) Notification(notification interface{}) *mocknotificationRequest_Notification_Call {
	return &mocknotificationRequest_Notification_Call{Call: _e.mock.On("Notification", notification)}
}

func (_c *mocknotificationRequest_Notification_Call) Run(run func(notification onesignal.Notification)) *mocknotificationRequest_Notification_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(onesignal.Notification))
	})
	return _c
}

func (_c *mocknotificationRequest_Notification_Call) Return() *mocknotificationRequest_Notification_Call {
	_c.Call.Return()
	return _c
}

func (_c *mocknotificationRequest_Notification_Call) RunAndReturn(run func(notification onesignal.Notification)) *mocknotificationRequest_Notification_Call {
	_c.Run(run)
	return _c
}
