
syntax = "proto3";

package unicom.api.v1;

import "google/api/annotations.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/timestamp.proto";

message Attachment {
  string name = 1;
  bytes data = 2;
  optional string url = 3;
}

enum ResponseSchema {
  HTTP = 0;
  SQS = 1;
  EVENT_BRIDGE = 2;
}

message ResponseChannel {
  ResponseSchema schema = 1;
  string url = 2;
}

message ResponseEvent {
  string workflow_id = 1;
  string status = 2;
  optional string error_message = 3;
}

message EmailRequest {
  string to_address = 1;
  string from_address = 2;
  string html = 3;
  string subject = 4;
  repeated Attachment attachments = 5;
}

message LanguageContent {
  string arabic = 1;
  string english = 2;
}

message PushRequest {
  // must be a valid UUID v4
  string idempotency_key = 1;
  string external_customer_id = 2;
  LanguageContent content = 3;
  LanguageContent heading = 4;
  LanguageContent sub_title = 5;
}

message SendCommunicationRequest {
  bool is_async = 1;
  // any point in time in the future.
  // if time has past, will send immediately.
  google.protobuf.Timestamp send_at = 2;
  string domain = 3;
  repeated ResponseChannel response_channels = 4;
  // optional email request
  EmailRequest email = 5;
  // optional push request
  PushRequest push = 6;
}

message StreamCommunicationRequest {
  string domain = 1;
  // optional email request
  EmailRequest email = 2;
  // optional push request
  PushRequest push = 3;
}

message SendResponse { string id = 1; }

message GetStatusRequest { string id = 1; }

message GetStatusResponse { string status = 1; }

service Unicom {
  rpc SendCommunication(SendCommunicationRequest) returns (SendResponse) {
    option (google.api.http) = {
      post : "/unicom/v1/send-communication"
      body : "*"
    };
  };
  rpc StreamCommunication(stream StreamCommunicationRequest)
      returns (stream SendResponse) {};
  rpc GetStatus(GetStatusRequest) returns (GetStatusResponse) {
    option (google.api.http) = {
      get : "/unicom/v1/status/{id}"
    };
  };
}
